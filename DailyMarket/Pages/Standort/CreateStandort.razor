@page "/standort/create"
@page "/standort/{Id:int}"

@inject NavigationManager NavigationManager
@inject StandortRepository StandortRepo

@using System.Runtime.CompilerServices
@using System.Security.Claims
@using DailyMarketData.Repositorys
@using DailyMarketData.Models
@using Microsoft.AspNetCore.Components

<h3>@title</h3>

<EditForm Model="@Standort" OnValidSubmit="@SaveStandort">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <p>
        <label for="Bezeichnung">Bezeichnung: </label>
        <InputText id="Bezeichnung" @bind-Value="@Standort.Bezeichnung" />
    </p>
    <p>
        <label for="Ort">Ort: </label>
        <InputText id="Ort" @bind-Value="@Standort.Ort" />
    </p>
    <p>
        <label for="Plz">Plz: </label>
        <InputText id="Plz" @bind-Value="@Standort.Plz" />
    </p>
    <p>
        <label for="Strasse">Strasse: </label>
        <InputText id="Strasse" @bind-Value="@Standort.Strasse" />
    </p>
    @if (!Id.HasValue)
    {
        <p>
            <label for="AnzahlStandplaetze">Anzahl Standplätze: </label>
            <InputNumber id="AnzahlStandplaetze" @bind-Value="@Standort.AnzahlStandplaetze" />
        </p>
        <p>
            <label for="PreisProTag">Preis pro Tag: </label>
            <InputNumber id="PreisProTag" @bind-Value="@Standort.PreisProTag" />
        </p>
    }

    @if (Id.HasValue)
    {
        <h4>Standplätze</h4>
        <table class="table mt-3">
            <thead>
                <tr>
                    <th>Nr</th>
                    <th>Preis / Tag</th>
                    @* TODO: Belegung anzeigen -> Frei = Ja/nein *@
                </tr>
            </thead>
            <tbody>
                @foreach (Standplatz standplatz in Standort.Standplaetze)
                {
                    <tr>
                        <td>@standplatz.Nr</td>
                        <td>CHF <InputNumber id="PreisProTag" @bind-Value="@standplatz.PreisProTag" /></td>
                        @*<td>@string.Format("{0:C}",standplatz.PreisProTag.GetValueOrDefault())</td>*@
                    </tr>
                }
            </tbody>
        </table>
    }

    <button class="btn btn-primary" type="submit">@submitBtnText</button>
</EditForm>
    <button class="btn btn-danger" @onclick="NavigateToStandort">Abbrechen</button>

@code {
    [Parameter]
    public int? Id { get; set; }

    [CascadingParameter] Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private Standort Standort { get; set; } = new Standort();

    private string title;

    private string submitBtnText;

    protected override async Task OnInitializedAsync()
    {
        if (Id.HasValue)
        {
            Standort = await StandortRepo.GetStandortAsync(Id.Value);
            title = "Standort Detail";
            submitBtnText = "Speichern";
        }
        else
        {
            title = "Neuer Standort erfassen";
            submitBtnText = "Standort erfassen";
        }
    }

    private async Task SaveStandort()
    {
        AuthenticationState authState = await AuthenticationStateTask;
        ClaimsPrincipal user = authState.User;

        if (Id.HasValue)
        {
            Standort.UpdatedBy = user.Identity.Name;
            StandortRepo.UpdateStandort(Standort);
        }
        else
        {
            Standort.CreatedBy = user.Identity.Name;
            StandortRepo.CreateStandort(Standort);
        }
        NavigateToStandort();
    }

    private void NavigateToStandort()
    {
        NavigationManager.NavigateTo("standort");
    }

}
