@page "/mitarbeiter"

@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@using System.Reflection.Metadata
@using System.Security.Claims
@using DailyMarketData.Repositorys
@using DailyMarketData.Models
@using Microsoft.AspNetCore.Components
@inject MitarbeiterRepository MitarbeiterRepo

<h3>Mitarbeiter</h3>

<table class="table">
    <thead>
        <tr>
            <th>Aktiv</th>
            <th>Vorname</th>
            <th>Nachname</th>
            <th>Stundensatz</th>
            <th class="alignCenter"><span class="oi oi-magnifying-glass"></span></th>
            <th class="alignCenter"><span class="oi oi-delete"></span></th>
        </tr>
    </thead>
    <tbody>
        @foreach (Mitarbeiter mitarbeiter in MitarbeiterList.OrderByDescending(m => m.IsActive).ThenBy(m => m.Vorname))
        {
            <tr>
                @if (mitarbeiter.IsActive)
                {
                    <td>Ja</td>
                } else
                {
                    <td>Nein</td>
                }
                <td>@mitarbeiter.Vorname</td>
                <td>@mitarbeiter.Nachname</td>
                <td>@mitarbeiter.Stundensatz</td>
                <td class="alignCenter"><button class="btn btn-primary" @onclick="@(new Action( () => NavigateToMitarbeiterEdit(mitarbeiter.Id)))">Bearbeiten</button></td>
                @if (mitarbeiter.IsActive)
                {
                    <td class="alignCenter"><button class="btn btn-danger" @onclick="@(new Action( async ()=> await EditActive(mitarbeiter.Id)))">Deaktivieren</button></td>
                }
                else
                {
                    <td class="alignCenter"><button class="btn btn-success" @onclick="@(new Action( async ()=> await EditActive(mitarbeiter.Id)))">Aktivieren</button></td>
                }
            </tr>
        }

    </tbody>
</table>
<button class="btn btn-primary" @onclick="NavigateToMitarbeiterCreate">Neuer Mitarbeiter</button>

@code {
    protected List<Mitarbeiter> MitarbeiterList { get; set; } = new List<Mitarbeiter>();

    [CascadingParameter] Task<AuthenticationState> AuthenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        MitarbeiterList = await MitarbeiterRepo.GetMitarbeiterAsync();
    }

    private async Task EditActive(int id)
    {
        AuthenticationState authState = await AuthenticationStateTask;
        ClaimsPrincipal user = authState.User;

        Mitarbeiter mitarbeiter = MitarbeiterList.Single(m => m.Id == id);
        mitarbeiter.IsActive = !mitarbeiter.IsActive;
        mitarbeiter.UpdatedBy = user.Identity.Name;

        MitarbeiterRepo.UpdateMitarbeiter(mitarbeiter);
    }

    void NavigateToMitarbeiterEdit(int id)
    {
        NavigationManager.NavigateTo($"mitarbeiter/{id}");
    }

    void NavigateToMitarbeiterCreate()
    {
        NavigationManager.NavigateTo("mitarbeiter/create");
    }
}
