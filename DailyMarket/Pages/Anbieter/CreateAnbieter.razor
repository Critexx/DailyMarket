@page "/anbieter/create"
@page "/anbieter/{Id:int}"

@inject NavigationManager NavigationManager
@inject AnbieterRepository AnbieterRepo
@inject MitgliedsanforderungRepository MitgliedsanforderungRepo

@using System
@using System.Security.Claims
@using DailyMarket.constants
@using DailyMarketData.Repositorys
@using DailyMarketData.Models
@using Microsoft.AspNetCore.Components

<h3>@title</h3>
<div class="container float-left">
    <div class="row">
        
        <div class="col-md-3">
            <h5>Detail</h5>
            <EditForm Model="@Anbieter" OnValidSubmit="@SaveAnbieter">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <p>
                    <label for="vorname">Vorname: </label>
                    <InputText id="vorname" @bind-Value="@Anbieter.Vorname" />
                </p>
                <p>
                    <label for="nachname">Nachname: </label>
                    <InputText id="nachname" @bind-Value="@Anbieter.Nachname" />
                </p>
                <p>
                    <label>Status: </label>
                    <select class="form-control selectWidth" @onchange="@SelectClicked">
                        <option value="@AnbieterStatus.Neu">@AnbieterStatus.StatusText.GetValueOrDefault(AnbieterStatus.Neu)</option>
                        <option value="@AnbieterStatus.Provisorisch">@AnbieterStatus.StatusText.GetValueOrDefault(AnbieterStatus.Provisorisch)</option>
                        <option value="@AnbieterStatus.Mitglied">@AnbieterStatus.StatusText.GetValueOrDefault(AnbieterStatus.Mitglied)</option>
                    </select>
                </p>

                <button class="btn btn-primary" type="submit">@submitBtnText</button>
            </EditForm>
            <button class="btn btn-danger" @onclick="NavigateToAnbieter">Abbrechen</button>
        </div>
        @if (Id.HasValue)
        {
            <div class="col-md-5">
                <h5>Anforderungen</h5>
                <table class="table">
                    
                    <thead>
                        <tr>
                            <th>Mitgliedsanforderung</th>
                            <th>Gültig bis</th>
                            <th>Erfüllt</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (MitgliedsanforderungView mitgliedsanforderung in mitgliedsanforderungViewList)
                        {
                            <tr>
                                <td>@mitgliedsanforderung.Bezeichnung</td>
                                <td>@mitgliedsanforderung.GueltigBis?.ToString("dd.MM.yyyy")</td>
                                @if (mitgliedsanforderung.Erfuellt && (mitgliedsanforderung.GueltigBis == null || mitgliedsanforderung.GueltigBis >= DateTime.Today))
                                {
                                    <td><span class="oi oi-circle-check"></span></td>
                                }
                                else
                                {
                                    <td><span class="oi oi-circle-x"></span></td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="col-md-4 ">
                <h5>Mietvertrag</h5>
                <p>
                    <label>Abonnement: </label>
                    @if (Anbieter.Mietvertrag.Any())
                    {
                        <label>@Anbieter.Mietvertrag.First().Abotyp?.Bezeichnung</label>
                    }
                    else
                    {
                        <label>Keines</label>
                    }
                </p>
                @if (Anbieter.Mietvertrag.Any())
                {
                    <p>
                        <label>Kosten monatlich: </label>
                        <label>CHF @Anbieter.Mietvertrag.First()?.Abrechnung</label>
                    </p>
                }
                else
                {
                    <button class="btn btn-primary" @onclick="NavigateToCreateMietvertrag">Mietvertrag erstellen</button>
                }
                <br />
                <table class="table">
                    <thead>
                        <tr>
                            <th>Standort</th>
                            <th>Von</th>
                            <th>Bis</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Anbieter.Mietvertrag.Any())
                        {
                            @foreach (Belegung belegung in Anbieter.Mietvertrag.First().Belegungen)
                            {
                                <tr>
                                    <td>@belegung.Standplatz.Standort.Bezeichnung</td>
                                    <td>@belegung.Mietvertrag.GueltigVon.ToString("dd.MM.yyyy")</td>
                                    <td>@belegung.Mietvertrag.GueltigBis?.ToString("dd.MM.yyyy")</td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
 </div>
    @code {
        [Parameter]
        public int? Id { get; set; }

        [CascadingParameter] Task<AuthenticationState> AuthenticationStateTask { get; set; }

        private Anbieter Anbieter { get; set; } = new Anbieter();

        private List<MitgliedsanforderungView> mitgliedsanforderungViewList = new List<MitgliedsanforderungView>();

        private string title;

        private string submitBtnText;

        protected override async Task OnInitializedAsync()
        {
            List<Mitgliedsanforderung> mitgliedsanforderungen = await MitgliedsanforderungRepo.GetMitgliedsanforderungAsync();
            if (Id.HasValue)
            {
                Anbieter = await AnbieterRepo.GetAnbieterAsync(Id.Value);
                foreach (Mitgliedsanforderung mitgliedsanforderung in mitgliedsanforderungen)
                {
                    MitgliedsanforderungAnbieter ma = Anbieter.MitgliedsanforderungAnbieter.SingleOrDefault(m => m.MitgliedsanforderungId == mitgliedsanforderung.Id);
                    mitgliedsanforderungViewList.Add(new MitgliedsanforderungView()
                    {
                        Bezeichnung = mitgliedsanforderung.Bezeichnung,
                        Erfuellt = ma != null,
                        GueltigBis = ma?.GueltigBis
                    });
                }
                title = "Anbieter";
                submitBtnText = "Speichern";
            }
            else
            {
                title = "Neuer Anbieter erfassen";
                submitBtnText = "Anbieter erfassen";
            }
        }

        private async Task SaveAnbieter()
        {
            AuthenticationState authState = await AuthenticationStateTask;
            ClaimsPrincipal user = authState.User;

            if (Id.HasValue)
            {
                Anbieter.UpdatedBy = user.Identity.Name;
                AnbieterRepo.UpdateAnbieter(Anbieter);
            }
            else
            {
                Anbieter.CreatedBy = user.Identity.Name;
                AnbieterRepo.CreateAnbieter(Anbieter);
            }
            NavigateToAnbieter();
        }

        private void SelectClicked(ChangeEventArgs e)
        {
            if(Enum.TryParse(e.Value.ToString(), out Anbieter.AnbieterStatus status))
                Anbieter.Status = status;
        }

        private void NavigateToAnbieter()
        {
            NavigationManager.NavigateTo("anbieter");
        }

        private void NavigateToCreateMietvertrag()
        {
            NavigationManager.NavigateTo($"mietvertrag/create/{Anbieter.Id}");
        }

    }
